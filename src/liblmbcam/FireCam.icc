// This file is part of liblmbcam.
//
// liblmbcam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// liblmbcam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with liblmbcam.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::vendor() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::string
liblmbcam::FireCam::vendor() const
{
  return p_info.vendor;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::model() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::string
liblmbcam::FireCam::model() const
{
  return p_info.model;
}
      
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::guid() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::string
liblmbcam::FireCam::guid() const
{
  std::stringstream ret;
  ret << p_info.euid_64;
  return ret.str();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::reset()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::reset()
{
  dc1394_init_camera( p_handle, p_node);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::left() const
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned int
liblmbcam::FireCam::left() const
{
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    return p_format7Left;
  }
  else
  {
    return 0;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::setLeft( unsigned int left)
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::FireCam::setLeft( unsigned int left)
{
  bool ret = false;
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    stopCamera();
    if( left < 0 || p_format7MaxWidth < left)
    {
      FireCamError error( "Error setting format7 left position");
      LMBErrorHandler::ErrorHandler()->handle( error);
      return false;
    }
    else
    {
      p_format7Left = left;
      ret = true;
    }
  }
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::top() const
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned int
liblmbcam::FireCam::top() const
{
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    return p_format7Top;
  }
  else
  {
    return 0;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::setTop( unsigned int top)
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::FireCam::setTop( unsigned int top)
{
  bool ret = false;
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    stopCamera();
    if( top < 0 || p_format7MaxHeight < top)
    {
      FireCamError error( "Error setting format7 top position");
      LMBErrorHandler::ErrorHandler()->handle( error);
      return false;
    }
    else
    {
      p_format7Top = top;
      ret = true;
    }
  }
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::width() const
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned int
liblmbcam::FireCam::width() const
{
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    return p_format7Width;
  }
  else
  {
    return p_currentMode.p_width;
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::setWidth( unsigned int width)
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::FireCam::setWidth( unsigned int width)
{
  bool ret = false;
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    stopCamera();
    if( width > (p_format7MaxWidth - p_format7Left))
    {
      std::stringstream errString;
      errString << "Error setting format7 width: " << width
                << " is greater than p_format7MaxWidth - p_format7Left ("
                << ( p_format7MaxWidth - p_format7Left) << ")";
      FireCamError error( errString.str());
      LMBErrorHandler::ErrorHandler()->handle( error);
      return false;
    }
    else
    {
      p_format7Width = width;
      ret = true;
    }
  }
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::maxWidth() const
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned int
liblmbcam::FireCam::maxWidth() const
{
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    return p_format7MaxWidth;
  }
  else
  {
    return p_currentMode.p_width;
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::height() const
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned int
liblmbcam::FireCam::height() const
{
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    return p_format7Height;
  }
  else
  {
    return p_currentMode.p_height;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::setHeight( unsigned int height)
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::FireCam::setHeight( unsigned int height)
{
  bool ret = false;
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    stopCamera();
    if( height > ( p_format7MaxHeight - p_format7Top))
    {
      std::stringstream errString;
      errString << "Error setting format7 height: " << height
                << " is greater than p_format7MaxHeight - p_format7Top ("
                << ( p_format7MaxHeight - p_format7Top) << ")";
      FireCamError error( errString.str());
      LMBErrorHandler::ErrorHandler()->handle( error);
      return false;
    }
    else
    {
      p_format7Height = height;
      ret = true;
    }
  }
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::maxHeight() const
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned int
liblmbcam::FireCam::maxHeight() const
{
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    return p_format7MaxHeight;
  }
  else
  {
    return p_currentMode.p_height;
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::availableModes() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::vector<std::string>
liblmbcam::FireCam::availableModes() const
{
  std::vector<std::string> ret;
  
  for( std::map<std::string,quadlet_t>::const_iterator it =
           p_availableModes.begin(); it != p_availableModes.end(); ++it)
  {
    ret.push_back( it->first);
  }
  
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
std::vector<double>
liblmbcam::FireCam::availableFramerates() const
{
  return availableFrameratesInMode( mode());
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::rawImage()
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned char*
liblmbcam::FireCam::rawImage()
{
  return (unsigned char*) p_camera.capture_buffer;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::doneWithBuffer()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::doneWithBuffer()
{
  if( p_deviceName != "" && p_availableParameters["DMA"]->asInt() == 1)
  {
    dc1394_dma_done_with_buffer( &p_camera);
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::handle() const
 *  ==> see headerfile
 *=======================================================================*/
inline
raw1394handle_t
liblmbcam::FireCam::handle()
{
  return p_handle;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::node() const
 *  ==> see headerfile
 *=======================================================================*/
inline
nodeid_t
liblmbcam::FireCam::node()
{
  return p_node;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::setMode( const Mode& mode)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::setMode( const Mode& mode)
{
  p_currentMode = mode;
  if( p_currentMode.p_formatID == FORMAT_SCALABLE_IMAGE_SIZE)
  {
    if( dc1394_query_format7_max_image_size( p_handle, p_node,
                                             p_currentMode.p_id,
                                             &p_format7MaxWidth,
                                             &p_format7MaxHeight)
        != DC1394_SUCCESS)
    {
      FireCamCriticalError error(
          "error while querying max image size");
      LMBErrorHandler::ErrorHandler()->handle( error);
      return;
    }
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::setFramerate( const Framerate& framerate)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::setFramerate( const Framerate& framerate)
{
  p_currentFramerate = framerate;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
std::string
liblmbcam::FireCam::colorCoding() const
{
  for( std::map<std::string,int>::const_iterator it = p_colorCodings.begin();
       it != p_colorCodings.end(); ++it)
  {
    if( p_currentMode.p_colorCodingID  == it->second)
    {
      return it->first;
    }
  }
  
  return "";
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::cleanup()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::cleanup()
{
  MutexLocker locker( p_libRawMutex);
  if( p_deviceName != "" && p_availableParameters["DMA"]->asInt() == 1)
  {
    dc1394_dma_unlisten( p_handle, &p_camera);
    dc1394_dma_release_camera( p_handle, &p_camera);
  }
  else
  {
    dc1394_release_camera( p_handle, &p_camera);
  }
  
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::capture()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::capture()
{
  /*---------------------------------------------------------------------
   *  Capture a frame
   *--------------------------------------------------------------------*/
  if( p_deviceName != "" && p_availableParameters["DMA"]->asInt() == 1)
  {
   if( dc1394_dma_single_capture( &p_camera) != DC1394_SUCCESS)
    {
      stopCamera();
      FireCamError error( "unable to capture a frame in dma mode");
      LMBErrorHandler::ErrorHandler()->handle( error);
    }
  }
  else
  {
    if( dc1394_single_capture( p_handle, &p_camera) != DC1394_SUCCESS)
    {
      stopCamera();
      FireCamError error( "unable to capture a frame");
      LMBErrorHandler::ErrorHandler()->handle( error);
    }
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:setRingBufferSize( unsigned int nFrames)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::setRingBufferSize( unsigned int nFrames)
{
  if( !p_cameraIsRunning)
  {
    p_numBufferedFrames = nFrames;
  }
  else
  {
    FireCamError error( "unable to set ringbuffer size: camera is running");
    LMBErrorHandler::ErrorHandler()->handle( error);
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::mostRecentFrameIndex()
 *  ==> see headerfile
 *=======================================================================*/
inline
long
liblmbcam::FireCam::mostRecentFrameIndex()
{
  if( p_cameraIsRunning)
  {
    return p_writtenFrameCount - (long) 1;
  }
  else
  {
    return -1;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::mostRecentFrameIndex()
 *  ==> see headerfile
 *=======================================================================*/
inline int liblmbcam::FireCam::mostRecentRingBufferIndex()
{ 
  return mostRecentFrameIndex() % p_numBufferedFrames;
}


/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::waitForFrameStarted( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
long
liblmbcam::FireCam::waitForFrameStarted( long frameIndex)
{
  if( frameIndex < 0)
  {
    return -1;
  }
  else
  {
    MutexLocker locker( &p_frameStartMutex);
    while( p_writtenFrameCount < frameIndex)
    {
      pthread_cond_wait( &p_frameStartCond,
                         &p_frameStartMutex);
      p_readFrameCount = p_writtenFrameCount - (long) 1;
    }
    return frameIndex;
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::waitForFrameFinished( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
long
liblmbcam::FireCam::waitForFrameFinished( long frameIndex)
{
	
  if( frameIndex < 0)
  {
    return -1;
  }
  else
  {
    MutexLocker locker( &p_frameFinishMutex);
    while( p_writtenFrameCount - (long) 1 < frameIndex)
    {
      pthread_cond_wait( &p_frameFinishCond,
                         &p_frameFinishMutex);
      p_readFrameCount = p_writtenFrameCount;
      if (_packetLostInDMA)
      {
        _packetLostInDMA = 0;
        throw FireCamLostDMAPacketError();
      }      
    }

    return frameIndex;
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::tryLockFrame( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::FireCam::tryLockFrame( long frameIndex)
{
  bool ret = false;
  
  if( frameIndex >= 0)
  {
    if( p_lockedFrame < 0)
    {
      if( frameIndex < p_writtenFrameCount)
      {
        if( p_writtenFrameCount - (long) p_numBufferedFrames < frameIndex)
        {
          p_lockedFrame = frameIndex;
          ret = true;
        }
        else
        {
          std::stringstream errString;
          errString << "Frame " << frameIndex << " is no longer available";
          FireCamError error( errString.str());
          LMBErrorHandler::ErrorHandler()->handle( error);
        }
      }
      else
      {
        std::stringstream errString;
        errString << "Frame " << frameIndex << " is not yet available";
        FireCamError error( errString.str());
        LMBErrorHandler::ErrorHandler()->handle( error);
      }
    }
    else
    {
      std::stringstream errString;
      errString << "Frame " << p_lockedFrame << " is already locked";
      FireCamError error( errString.str());
      LMBErrorHandler::ErrorHandler()->handle( error);
    }
  }
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::getFrame( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned char*
liblmbcam::FireCam::getFrame( long frameIndex)
{
  if( p_writtenFrameCount == 0
      || frameIndex < 0
      || frameIndex < p_writtenFrameCount - (long) p_numBufferedFrames
      || frameIndex > p_writtenFrameCount)
  {
    return 0;
  }
  else
  {
    return _vBufFrameStart[frameIndex%p_numBufferedFrames];
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::unlockFrame()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::FireCam::unlockFrame()
{
  if( p_lockedFrame < 0)
  {
    std::stringstream errString;
    errString << "No frame locked";
    FireCamError error( errString.str());
    LMBErrorHandler::ErrorHandler()->handle( error);
  }
  else
  {
    p_readFrameCount = p_lockedFrame;
    p_lockedFrame = -1;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::isCompressed() const
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::FireCam::isCompressed() const
{
  if( nComponents() != 0)
  {
    return false;
  }
  else
  {
    return true;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::nComponents() const
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned int
liblmbcam::FireCam::nComponents() const
{
  return p_currentMode.p_nComponents;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCam::bytePerPixel() const
 *  ==> see headerfile
 *=======================================================================*/
inline
double
liblmbcam::FireCam::bytePerPixel() const
{
  return p_currentMode.p_bytePerPixel;
}
