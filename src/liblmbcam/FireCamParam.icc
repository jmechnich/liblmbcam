/**************************************************************************
**       Title: 
**    $RCSfile: FireCamParam.icc,v $
**   $Revision: 1.11 $$Name:  $
**       $Date: 2004/11/05 03:46:12 $
**   Copyright: GPL $Author: mechnich $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log: FireCamParam.icc,v $
**  Revision 1.11  2004/11/05 03:46:12  mechnich
**  added resetValue() to FireCamAbsRange class, which resets the last given value for this feature
**
**  Revision 1.10  2004/10/19 05:54:46  mechnich
**  added DMA stuff without testing, will probably need future fixes; added absolute control features
**
**  Revision 1.9  2003/06/12 16:13:19  mechnich
**  added comments
**
**  Revision 1.8  2003/05/12 15:39:52  mechnich
**  all functions unlock the libraw mutex before throwing an error now
**
**  Revision 1.7  2003/05/07 00:06:29  mechnich
**  intorduced a wrapper mutex for critical libraw1394 functions,
**  liblmbcam should now be completely thread safe
**
**  Revision 1.6  2003/05/06 23:05:39  mechnich
**  - increased thread safety of library
**  - restructured parameter classes, introduced new subclasses to LMBCamParam:
**    LMBCamParamIntRange and LMBCamParamSwitch
**    TODO: add LMBCamParamDoubleRange for absolute features
**
**  Revision 1.5  2003/05/05 02:33:36  mechnich
**  added functions for querying and setting auto mode
**
**  Revision 1.4  2003/04/23 13:28:52  mechnich
**  - fixed parameter queries for all tested cameras
**  - fixed bug in iso handler function
**  - moved p_cameraIsRunning with affiliated functions to LMBCam
**
**  Revision 1.3  2003/01/20 10:22:24  mechnich
**  *** empty log message ***
**
**  Revision 1.2  2002/12/11 04:21:21  mechnich
**  made non-dma mode the default
**  adapted parameter handling for dma accordingly
**
**  Revision 1.1  2002/12/04 13:17:46  mechnich
**  initial revision
**
**
**
**************************************************************************/

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamIntRange::cameraHandle() const
 *  ==> see headerfile
 *=======================================================================*/
inline
raw1394handle_t
liblmbcam::FireCamParamIntRange::cameraHandle() const
{
  return _camera->handle();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamIntRange::cameraNode() const
 *  ==> see headerfile
 *=======================================================================*/
inline
nodeid_t
liblmbcam::FireCamParamIntRange::cameraNode() const
{
  return _camera->node();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamIntRange::minValueAsInt() const
 *  ==> see headerfile
 *=======================================================================*/
inline
int
liblmbcam::FireCamParamIntRange::minValueAsInt() const
{
  return _min;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamIntRange::maxValueAsInt() const
 *  ==> see headerfile
 *=======================================================================*/
inline
int
liblmbcam::FireCamParamIntRange::maxValueAsInt() const
{
  return _max;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAbsRange::cameraHandle() const
 *  ==> see headerfile
 *=======================================================================*/
inline
raw1394handle_t
liblmbcam::FireCamParamAbsRange::cameraHandle() const
{
  return _camera->handle();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAbsRange::cameraNode() const
 *  ==> see headerfile
 *=======================================================================*/
inline
nodeid_t
liblmbcam::FireCamParamAbsRange::cameraNode() const
{
  return _camera->node();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAbsRange::minValueAsFloat() const
 *  ==> see headerfile
 *=======================================================================*/
inline
float
liblmbcam::FireCamParamAbsRange::minValueAsFloat() const
{
  return _min;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAbsRange::maxValueAsFloat() const
 *  ==> see headerfile
 *=======================================================================*/
inline
float
liblmbcam::FireCamParamAbsRange::maxValueAsFloat() const
{
  return _max;
}

inline
void
liblmbcam::FireCamParamAbsRange::resetValue()
{
  setValue( _val);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAutoSwitch::minValueAsInt() const
 *  ==> see headerfile
 *=======================================================================*/
inline
int
liblmbcam::FireCamParamAutoSwitch::minValueAsInt() const
{
  return 0;
}
    
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAutoSwitch::maxValueAsInt() const
 *  ==> see headerfile
 *=======================================================================*/
inline
int
liblmbcam::FireCamParamAutoSwitch::maxValueAsInt() const
{
  return 1;
}


/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAbsSwitch::minValueAsInt() const
 *  ==> see headerfile
 *=======================================================================*/
inline
int
liblmbcam::FireCamParamAbsSwitch::minValueAsInt() const
{
  return 0;
}
    
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:FireCamParamAbsSwitch::maxValueAsInt() const
 *  ==> see headerfile
 *=======================================================================*/
inline
int
liblmbcam::FireCamParamAbsSwitch::maxValueAsInt() const
{
  return 1;
}
