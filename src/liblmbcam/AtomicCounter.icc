// This file is part of liblmbcam.
//
// liblmbcam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// liblmbcam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with liblmbcam.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::AtomicCounter()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
AtomicCounter<T>::AtomicCounter()
        : p_counter( T(0))
{
  pthread_mutex_init( &p_lock, NULL);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::AtomicCounter( T value)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
AtomicCounter<T>::AtomicCounter( T value)
        : p_counter( value)
{
  pthread_mutex_init( &p_lock, NULL);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
AtomicCounter<T>::~AtomicCounter()
{
  pthread_mutex_destroy( &p_lock);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator++()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator++()
{
  MutexLocker locker( &p_lock);
  return ++p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator++(int)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator++(int)
{
  MutexLocker locker( &p_lock);
  return p_counter++;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator--()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator--()
{
  MutexLocker locker( &p_lock);
  return --p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator--(int)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator--(int)
{
  MutexLocker locker( &p_lock);
  return p_counter--;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator+=( T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator+=( T change)
{
  MutexLocker locker( &p_lock);
  p_counter += change;
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator-=(T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator-=(T change)
{
  MutexLocker locker( &p_lock);
  p_counter -= change;
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator+(T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator+(T change)
{
  MutexLocker locker( &p_lock);
  return (p_counter + change);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator-(T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator-(T change)
{
  MutexLocker locker( &p_lock);
  return (p_counter - change);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator T()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
AtomicCounter<T>::operator T() const
{
  MutexLocker locker( &p_lock);
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator=( T value)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator=( T value)
{
  MutexLocker locker( &p_lock);
  p_counter = value;
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator!(void)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
bool
AtomicCounter<T>::operator!(void)
{
  MutexLocker locker( &p_lock);
  if( p_counter)
      return false;
  return true;
}
