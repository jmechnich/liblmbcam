/**************************************************************************
**       Title: 
**    $RCSfile: AtomicCounter.icc,v $
**   $Revision: 1.6 $$Name:  $
**       $Date: 2004/02/23 13:52:32 $
**   Copyright: GPL $Author: mechnich $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log: AtomicCounter.icc,v $
**  Revision 1.6  2004/02/23 13:52:32  mechnich
**  allocate mutex on heap to prevent smp system from hanging
**
**  Revision 1.5  2004/02/20 22:37:54  mechnich
**  added MutexLocker class
**
**  Revision 1.4  2003/11/05 16:25:38  mechnich
**  sync
**
**  Revision 1.3  2003/06/12 16:13:19  mechnich
**  added comments
**
**  Revision 1.2  2003/05/07 00:05:15  mechnich
**  made the mutex allocated on the stack
**
**  Revision 1.1  2003/04/16 16:38:26  mechnich
**  initial revision
**
**
**
**************************************************************************/

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::AtomicCounter()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
AtomicCounter<T>::AtomicCounter()
        : p_counter( T(0)), p_lock( new pthread_mutex_t)
{
  pthread_mutex_init( p_lock, NULL);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::AtomicCounter( T value)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
AtomicCounter<T>::AtomicCounter( T value)
        : p_counter( value), p_lock( new pthread_mutex_t)
{
  pthread_mutex_init( p_lock, NULL);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
AtomicCounter<T>::~AtomicCounter()
{
  pthread_mutex_destroy( p_lock);
  delete p_lock;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator++()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator++()
{
  MutexLocker locker( p_lock);
  return ++p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator++(int)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator++(int)
{
  MutexLocker locker( p_lock);
  return p_counter++;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator--()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator--()
{
  MutexLocker locker( p_lock);
  return --p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator--(int)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator--(int)
{
  MutexLocker locker( p_lock);
  return p_counter--;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator+=( T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator+=( T change)
{
  MutexLocker locker( p_lock);
  p_counter += change;
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator-=(T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator-=(T change)
{
  MutexLocker locker( p_lock);
  p_counter -= change;
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator+(T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator+(T change)
{
  MutexLocker locker( p_lock);
  return (p_counter + change);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator-(T change)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator-(T change)
{
  MutexLocker locker( p_lock);
  return (p_counter - change);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator T()
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
AtomicCounter<T>::operator T()
{
  MutexLocker locker( p_lock);
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator=( T value)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
T
AtomicCounter<T>::operator=( T value)
{
  MutexLocker locker( p_lock);
  p_counter = value;
  return p_counter;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:AtomicCounter<T>::operator!(void)
 *  ==> see headerfile
 *=======================================================================*/
template<typename T>
inline
bool
AtomicCounter<T>::operator!(void)
{
  MutexLocker locker( p_lock);
  if( p_counter)
      return false;
  return true;
}
