/**************************************************************************
**       Title: 
**    $RCSfile: LMBCam.icc,v $
**   $Revision: 1.7 $$Name:  $
**       $Date: 2004/05/28 12:09:01 $
**   Copyright: GPL $Author: mechnich $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log: LMBCam.icc,v $
**  Revision 1.7  2004/05/28 12:09:01  mechnich
**  added extended parameters
**
**  Revision 1.6  2003/06/12 16:13:19  mechnich
**  added comments
**
**  Revision 1.5  2003/05/21 09:00:47  mechnich
**  removed superfluent functions and added missing to LMBCam
**
**  Revision 1.4  2003/04/23 13:23:53  mechnich
**  moved p_cameraIsRunning from FireCam class to here
**
**  Revision 1.3  2003/04/16 16:41:26  mechnich
**  added threaded framegrabber for non-DMA mode
**
**  Revision 1.2  2003/01/20 10:22:24  mechnich
**  *** empty log message ***
**
**  Revision 1.1  2002/12/04 13:17:46  mechnich
**  initial revision
**
**
**
**************************************************************************/

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::startCameraRunContinuous()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::startCameraRunContinuous()
{
  p_maxReadFrames = LONG_MAX;
  startCamera();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::startCameraRunNFrames( long nFrames)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::startCameraRunNFrames( long nFrames)
{
  p_maxReadFrames = nFrames;
  startCamera();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::stopAtFrameIndex() const
 *  ==> see headerfile
 *=======================================================================*/
inline
long
liblmbcam::LMBCam::stopAtFrameIndex() const
{
  return p_maxReadFrames;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::frameReceiveStarted( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::frameReceiveStarted( long frameIndex)
{}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::frameReceiveFinished( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::frameReceiveFinished( long frameIndex)
{}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::ringBufferCritical()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::ringBufferCritical()
{
#ifdef LIBLMBCAMDEBUG
  std::cout << "Ringbuffer critical!" << std::endl;
#endif
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::ringBufferOverflow()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::ringBufferOverflow()
{
#ifdef LIBLMBCAMDEBUG
  std::cout << "Ringbuffer overflow!" << std::endl;
#endif
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::restartCamera()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::restartCamera()
{
  stopCamera();
  startCamera();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::isRunning() const
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::LMBCam::isRunning() const
{
  return p_cameraIsRunning;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::parameterMap() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::map<std::string,liblmbcam::LMBCamParam*>
liblmbcam::LMBCam::parameterMap() const
{
  return p_availableParameters;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::availableParameters() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::vector<std::string>
liblmbcam::LMBCam::availableParameters() const
{
  std::vector<std::string> ret;
  for( std::map<std::string,LMBCamParam*>::const_iterator it
           = p_availableParameters.begin();
       it != p_availableParameters.end(); ++it)
  {
    ret.push_back( it->first);
  }
  
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::extendedParameterMap() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::map<std::string,std::string>
liblmbcam::LMBCam::extendedParameterMap() const
{
  return p_extendedParameters;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::extendedParameters() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::vector<std::string>
liblmbcam::LMBCam::extendedParameters() const
{
  std::vector<std::string> ret;
  for( std::map<std::string,std::string>::const_iterator it
           = p_extendedParameters.begin();
       it != p_extendedParameters.end(); ++it)
  {
    ret.push_back( it->first);
  }
  
  return ret;
}

