// This file is part of liblmbcam.
//
// liblmbcam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// liblmbcam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with liblmbcam.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::startCameraRunContinuous()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::startCameraRunContinuous()
{
  p_maxReadFrames = LONG_MAX;
  startCamera();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::startCameraRunNFrames( long nFrames)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::startCameraRunNFrames( long nFrames)
{
  p_maxReadFrames = nFrames;
  startCamera();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::stopAtFrameIndex() const
 *  ==> see headerfile
 *=======================================================================*/
inline
long
liblmbcam::LMBCam::stopAtFrameIndex() const
{
  return p_maxReadFrames;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::isRunning() const
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
liblmbcam::LMBCam::isRunning() const
{
  return p_cameraIsRunning;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::restartCamera()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::restartCamera()
{
  stopCamera();
  startCamera();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::frameReceiveStarted( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::frameReceiveStarted( long frameIndex)
{}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::frameReceiveFinished( long frameIndex)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::frameReceiveFinished( long frameIndex)
{}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::ringBufferCritical()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::ringBufferCritical()
{
  std::cout << "Ringbuffer critical!" << std::endl;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::ringBufferOverflow()
 *  ==> see headerfile
 *=======================================================================*/
inline
void
liblmbcam::LMBCam::ringBufferOverflow()
{
  std::cout << "Ringbuffer overflow!" << std::endl;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::parameterMap() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::map<std::string,liblmbcam::LMBCamParam*>
liblmbcam::LMBCam::parameterMap() const
{
  return p_availableParameters;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::availableParameters() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::vector<std::string>
liblmbcam::LMBCam::availableParameters() const
{
  std::vector<std::string> ret;
  for( std::map<std::string,LMBCamParam*>::const_iterator it
           = p_availableParameters.begin();
       it != p_availableParameters.end(); ++it)
  {
    ret.push_back( it->first);
  }
  
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::extendedParameterMap() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::map<std::string,std::string>
liblmbcam::LMBCam::extendedParameterMap() const
{
  return p_extendedParameters;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:LMBCam::extendedParameters() const
 *  ==> see headerfile
 *=======================================================================*/
inline
std::vector<std::string>
liblmbcam::LMBCam::extendedParameters() const
{
  std::vector<std::string> ret;
  for( std::map<std::string,std::string>::const_iterator it
           = p_extendedParameters.begin();
       it != p_extendedParameters.end(); ++it)
  {
    ret.push_back( it->first);
  }
  
  return ret;
}

