// This file is part of liblmbcam.
//
// liblmbcam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// liblmbcam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with liblmbcam.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamModeControlWidget::changeVideoMode( const QString& mode)
{
  emit( videoModeChanged( mode));
  if( mode.startsWith( "Format7"))
  {
    updateFormat7Controls();
  }
  else
  {
    updateFramerateCombo();
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamModeControlWidget::changeFramerate( const QString& fps)
{
  emit( framerateChanged( fps.toDouble()));
  if( p_camera->mode().substr(0,7) == "Format7")
  {
    updateFormat7Controls();
  }
  else
  {
    updateFramerateCombo();
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamModeControlWidget::updateFormat7Geometry()
{
  unsigned int width = p_camera->width();
  unsigned int height = p_camera->height();
  
  try
  {
    p_camera->stopCamera();
    p_camera->setLeft( p_left->text().toInt());
    p_camera->setTop( p_top->text().toInt());
    p_camera->setWidth( p_width->text().toInt());
    p_camera->setHeight( p_height->text().toInt());
    
    if( width != p_camera->width())
        emit( widthChanged( p_camera->width()));
    if( height != p_camera->height())
        emit( heightChanged( p_camera->height()));
        
    p_camera->startCameraRunContinuous();
  }
  catch( LMBCamError& error)
  {
    QString error( "Format7 geometry error: ");
    if( p_left->text().toInt() + p_width->text().toInt() >
        p_maxWidth->text().toInt())
    {
      error.append( "left + width exceeds maximum image width.");
    }
    else if( p_top->text().toInt() + p_height->text().toInt() >
             p_maxHeight->text().toInt())
    {
      error.append( "top + height exceeds maximum image height.");
    }
    else
    {
      error.append( "cannot restart camera with given image geometry.");
    }
    
    QMessageBox::warning( 0, "Warning", error, 0, 0);
  }
}
