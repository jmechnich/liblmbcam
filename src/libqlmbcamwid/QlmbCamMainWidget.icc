// This file is part of liblmbcam.
//
// liblmbcam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// liblmbcam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with liblmbcam.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::closeEvent( QCloseEvent* e)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::closeEvent( QCloseEvent* e)
{
  p_camera->stopCamera();
  p_wasClosed = true;
  
  e->accept();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::setFrameDrop( bool dropFrames)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::setFrameDrop( bool dropFrames)
{
  p_dropFrames = dropFrames;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::showFPS( bool show)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::showFPS( bool show)
{
  p_showFPS = show;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::nextFrame()
 *  ==> see headerfile
 *=======================================================================*/
inline
long
QlmbCamMainWidget::nextFrame()
{
  if( p_dropFrames)
  {
    return p_camera->mostRecentFrameIndex();
  }
  else
  {
    return p_camera->waitForFrameFinished( ++p_currentFrame);
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::parameterIncrease(
 *                                              std::string name, int amount)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::parameterIncrease( std::string name, int amount)
{
  LMBCamParam* param = p_camera->param( name);
  if( param)
  {
    try
    {
      param->setValue( param->asInt() + amount);
      std::cout << "Increased "<< name << " to: "
                << param->asInt() << std::endl;
    }
    catch(LMBError&)
    {
      param->setValue( param->maxValueAsInt());
      std::cout << "Maximum value of " << name << " reached: "
                << param->asInt() << std::endl;
    }
  }
  else
  {
    std::cout << name << " is not supported by camera" << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::parameterDecrease(
 *                                              std::string name, int amount)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::parameterDecrease( std::string name, int amount)
{
  LMBCamParam* param = p_camera->param( name);
  if( param)
  {
    try
    {
      param->setValue( param->asInt() - amount);
      std::cout << "Decreased "<< name << " to: "
                << param->asInt() << std::endl;
    }
    catch(LMBError&)
    {
      param->setValue( param->minValueAsInt());
      std::cout << "Minimum value of " << name << " reached: "
                << param->asInt() << std::endl;
    }
  }
  else
  {
    std::cout << name << " is not supported by camera" << std::endl;
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::parameterSwitchAuto(
 *                                                        std::string name)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::parameterSwitchAuto( std::string name)
{
  LMBCamParam* param = p_camera->param( name);
  if( param)
  {
    param->setValue( param->asInt() == 0 ? 1 : 0);
    std::cout << "Switched " << name << " to auto mode "
              << param->asInt() << std::endl;
  }
  else
  {
    std::cout << name << " is not supported by camera" << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::currentRawImage()
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned char*
QlmbCamMainWidget::currentRawImage()
{
  unsigned char* ret = 0;
  
  if( p_data)
  {
    unsigned int size = p_camera->width()*p_camera->height();
    ret = new unsigned char[size];
    memcpy( ret, p_data, size);
  }
  
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::copyRawImage(
 *                                                     unsigned char* dest)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::copyRawImage( unsigned char* dest)
{
  if( p_data)
  {
    memcpy( dest, p_data, p_camera->width()*p_camera->height());
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::wasClosed() const
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
QlmbCamMainWidget::wasClosed() const
{
  return p_wasClosed;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::changeVideoMode(
 *                                                     const QString& mode)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeVideoMode( const QString& mode)
{
  try
  {
    p_camera->setMode( mode.toLatin1().data());
    p_currentFrame = -1;
    p_fidWidget->setImageSize( p_camera->width(),
                               p_camera->height());
    adjustSize();
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::changeFramerate( double fps)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeFramerate( double fps)
{
  try
  {
    p_camera->stopCamera();
    p_camera->setFramerate( fps, true);
    p_currentFrame = -1;
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeWidth( unsigned int width)
{
  try
  {
    p_camera->setWidth( width);
    p_currentFrame = -1;
    p_fidWidget->setImageSize( p_camera->width(),
                               p_camera->height());
    adjustSize();
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeHeight( unsigned int height)
{
  try
  {
    p_camera->setHeight( height);
    p_currentFrame = -1;
    p_fidWidget->setImageSize( p_camera->width(),
                               p_camera->height());
    adjustSize();
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}
