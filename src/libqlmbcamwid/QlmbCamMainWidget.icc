/**************************************************************************
**       Title: 
**    $RCSfile: QlmbCamMainWidget.icc,v $
**   $Revision: 1.8 $$Name:  $
**       $Date: 2004/12/03 09:12:47 $
**   Copyright: GPL $Author: ronneber $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log: QlmbCamMainWidget.icc,v $
**  Revision 1.8  2004/12/03 09:12:47  ronneber
**  - stop camera before changing the framerate
**
**  Revision 1.7  2004/10/19 05:48:18  mechnich
**  changed LMBError interface
**
**  Revision 1.6  2003/10/10 15:12:28  mechnich
**  added try-catch constructions
**
**  Revision 1.5  2003/08/05 15:35:54  mechnich
**  added lineedits for Format7 image position and changed layout
**
**  Revision 1.4  2003/07/03 15:27:36  mechnich
**  added comments
**
**  Revision 1.3  2003/05/22 08:30:30  mechnich
**  - added slots for changeing video moder and framerate
**
**  Revision 1.2  2003/05/21 14:54:49  mechnich
**  ssetting framerates allows rounding now
**
**  Revision 1.1  2003/05/12 17:19:17  mechnich
**  initial revision
**
**
**
**************************************************************************/

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::closeEvent( QCloseEvent* e)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::closeEvent( QCloseEvent* e)
{
  p_camera->stopCamera();
  p_wasClosed = true;
  
  e->accept();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::setFrameDrop( bool dropFrames)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::setFrameDrop( bool dropFrames)
{
  p_dropFrames = dropFrames;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::showFPS( bool show)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::showFPS( bool show)
{
  p_showFPS = show;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::nextFrame()
 *  ==> see headerfile
 *=======================================================================*/
inline
long
QlmbCamMainWidget::nextFrame()
{
  if( p_dropFrames)
  {
    return p_camera->mostRecentFrameIndex();
  }
  else
  {
    return p_camera->waitForFrameFinished( ++p_currentFrame);
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::parameterIncrease(
 *                                              std::string name, int amount)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::parameterIncrease( std::string name, int amount)
{
  LMBCamParam* param = p_camera->param( name);
  if( param)
  {
    try
    {
      param->setValue( param->asInt() + amount);
      std::cout << "Increased "<< name << " to: "
                << param->asInt() << std::endl;
    }
    catch(LMBError&)
    {
      param->setValue( param->maxValueAsInt());
      std::cout << "Maximum value of " << name << " reached: "
                << param->asInt() << std::endl;
    }
  }
  else
  {
    std::cout << name << " is not supported by camera" << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::parameterDecrease(
 *                                              std::string name, int amount)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::parameterDecrease( std::string name, int amount)
{
  LMBCamParam* param = p_camera->param( name);
  if( param)
  {
    try
    {
      param->setValue( param->asInt() - amount);
      std::cout << "Decreased "<< name << " to: "
                << param->asInt() << std::endl;
    }
    catch(LMBError&)
    {
      param->setValue( param->minValueAsInt());
      std::cout << "Minimum value of " << name << " reached: "
                << param->asInt() << std::endl;
    }
  }
  else
  {
    std::cout << name << " is not supported by camera" << std::endl;
  }
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::parameterSwitchAuto(
 *                                                        std::string name)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::parameterSwitchAuto( std::string name)
{
  LMBCamParam* param = p_camera->param( name);
  if( param)
  {
    param->setValue( param->asInt() == 0 ? 1 : 0);
    std::cout << "Switched " << name << " to auto mode "
              << param->asInt() << std::endl;
  }
  else
  {
    std::cout << name << " is not supported by camera" << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::currentRawImage()
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned char*
QlmbCamMainWidget::currentRawImage()
{
  unsigned char* ret = 0;
  
  if( p_data)
  {
    unsigned int size = p_camera->width()*p_camera->height();
    ret = new unsigned char[size];
    memcpy( ret, p_data, size);
  }
  
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::copyRawImage(
 *                                                     unsigned char* dest)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::copyRawImage( unsigned char* dest)
{
  if( p_data)
  {
    memcpy( dest, p_data, p_camera->width()*p_camera->height());
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::wasClosed() const
 *  ==> see headerfile
 *=======================================================================*/
inline
bool
QlmbCamMainWidget::wasClosed() const
{
  return p_wasClosed;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::changeVideoMode(
 *                                                     const QString& mode)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeVideoMode( const QString& mode)
{
  try
  {
    p_camera->setMode( mode.latin1());
    p_currentFrame = -1;
    p_fidWidget->setImageSize( p_camera->width(),
                               p_camera->height());
    adjustSize();
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:QlmbCamMainWidget::changeFramerate( double fps)
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeFramerate( double fps)
{
  try
  {
    p_camera->stopCamera();
    p_camera->setFramerate( fps, true);
    p_currentFrame = -1;
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeWidth( unsigned int width)
{
  try
  {
    p_camera->setWidth( width);
    p_currentFrame = -1;
    p_fidWidget->setImageSize( p_camera->width(),
                               p_camera->height());
    adjustSize();
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
QlmbCamMainWidget::changeHeight( unsigned int height)
{
  try
  {
    p_camera->setHeight( height);
    p_currentFrame = -1;
    p_fidWidget->setImageSize( p_camera->width(),
                               p_camera->height());
    adjustSize();
    p_camera->startCameraRunContinuous();
  }
  catch( liblmbcam::LMBError& error)
  {
    std::cout << error.str() << std::endl;
  }
}
