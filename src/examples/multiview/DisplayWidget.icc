// This file is part of liblmbcam.
//
// liblmbcam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// liblmbcam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with liblmbcam.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
DisplayWidget::setFrameDrop( bool dropFrames)
{
  p_dropFrames = dropFrames;
}


/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
long
DisplayWidget::nextFrame()
{
  if( p_dropFrames)
  {
    return p_camera->mostRecentFrameIndex();
  }
  else
  {
    return p_camera->waitForFrameFinished( ++p_currentFrame);
  }
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned char*
DisplayWidget::currentRawImage()
{
  unsigned char* ret = 0;
  
  if( p_data)
  {
    unsigned int size = p_camera->width()*p_camera->height();
    ret = new unsigned char[size];
    memcpy( ret, p_data, size);
  }
  
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
void
DisplayWidget::copyRawImage( unsigned char* dest)
{
  if( p_data)
  {
    memcpy( dest, p_data, p_camera->width()*p_camera->height());
  }
}

